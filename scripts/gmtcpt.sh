#!/bin/bash

# Modified from matplotlib _cm.py

function usage () {
    echo "$0 -c NAME -o CPTFILE [-p PSFILE] [-l]"
    echo "    -c NAME            Define color palette to use"
    echo "    -o CPTFILE         Define output color palette name"
    echo "    -p FILE            Plot chosen color palette in PDF with basename FILE"
    echo "    -l                 List available color palettes"
    if [ "$1" == "--list" ]
    then
        echo
        echo "    Available color palettes (descriptions light -> dark):"
        echo
        echo "    Matplotlib Color Palettes"
        echo "    bone"
        echo
        echo "    Map Color Palettes by Cynthia Brewer (http://colorbrewer2.org)"
        echo "    brewerBlues"
        echo "    brewerBlueGreen"
        echo "    brewerBluePurple"
        echo "    brewerGreenBlue"
        echo "    brewerGreens"
        echo "    brewerGreys"
        echo "    brewerOranges"
        echo "    brewerOrangeRed"
        echo "    brewerPurpleBlue"
        echo "    brewerPurpleBlueGreen"
        echo "    brewerPurpleRed"
        echo "    brewerPurples"
        echo "    brewerRedPurple"
        echo "    brewerReds"
        echo "    brewerYellowGreen"
        echo "    brewerYellowGreenBlue"
        echo "    brewerYellowOrangeBrown"
        echo "    brewerYellowOrangeRed"
        echo "    brewerDivergingBrownGreen"
        echo "    brewerDivergingPinkYellowGreen"
        echo "    brewerDivergingPurpleGreen"
        echo "    brewerDivergingPurpleOrange"
        echo "    brewerDivergingRedBlue"
        echo "    brewerDivergingRedGrey"
        echo "    brewerDivergingRedYellowBlue"
        echo "    brewerDivergingRedYellowGreen"
        echo "    brewerDivergingSpectral"
        echo
        echo "    Diverging Color Palette by Kenneth Moreland (http://www.kennethmoreland.com/color-maps)"
        echo "    morelandCoolWarm (red -> orange -> blue)"
        echo
        echo "    Heat Map by Wistia (https://github.com/wistia/heatmap-palette)"
        echo "    wistia (yellow -> orange))"
        echo
        echo "    CMRmap by Carey Rappaport (http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m)"
        echo "    cmrmap (yellow -> orange -> purple -> blue)"
        echo
        echo "    GIST Package by David Munro (http://dhmunro.github.com)"
        echo "    gistEarth (pink -> green -> blue)"
        echo "    gistHeat (orange -> red)"
        echo
        echo "    Gnuplot color palettes"
        echo "    gnuplot2 (yellow -> orange -> pink -> purple -> blue)"
        echo
        echo "    Use colortool from Hdef package to make nice topo CPT"
        echo "    Hdef_topo_bold,ZMIN,ZMAX"
        echo
        echo "# Custom 1: Bold colors"
        echo "colortool -hue 300,180 -chroma 50,0 -lightness 5,100 -gmt -T-7000/0/1 > topo_new.cpt"
        echo "colortool -hue 150,60 -chroma 50,0 -lightness 25,100 -gmt -T0/5000/1 >> topo_new.cpt"
        echo "tail -1 topo_new.cpt | awk '{print \"F\",\$2}' >> topo_new.cpt"
        echo "head -1 topo_new.cpt | awk '{print \"B\",\$2}' >> topo_new.cpt"
        echo
        echo "# Custom 2: Faded colors"
        echo "colortool -hue 300,180 -chroma 25,0 -lightness 50,90 -gmt -T-7000/0/1 > topo_new.cpt"
        echo "colortool -hue 150,60 -chroma 20,0 -lightness 65,90 -gmt -T0/5000/1 >> topo_new.cpt"
        echo "tail -1 topo_new.cpt | awk '{print \"F\",\$2}' >> topo_new.cpt"
        echo "head -1 topo_new.cpt | awk '{print \"B\",\$2}' >> topo_new.cpt"
        echo
        echo "# Custom 3: Faded ocean, bolder land"
        echo "colortool -hue 300,270 -chroma 30,20 -lightness 60,95 -gmt -T-7000/0/1 > topo_new.cpt"
        echo "colortool -hue 150,100 -chroma 35,15 -lightness 50,90 -gmt -T0/5000/1 >> topo_new.cpt"
        echo "tail -1 topo_new.cpt | awk '{print \"F\",\$2}' >> topo_new.cpt"
        echo "head -1 topo_new.cpt | awk '{print \"B\",\$2}' >> topo_new.cpt"
        echo
        echo "Use colortool from Hdef package to make nice fault slip CPT"
        echo "# Color palette: white -> light blue -> light green -> yellow"
        echo "colortool -hue 210,60 -lightness 100,70 -chroma 30,100 -gmt -T0.0/0.5/0.01 > slip.cpt"
        echo "# Color palette: yellow -> orange -> red -> purple"
        echo "colortool -hue 60,0   -lightness 70,40 -chroma 100,60 -gmt -T0.5/1.0/0.01 >> slip.cpt"
        echo "tail -1 slip.cpt | awk '{print \"F\",\$2}' >> slip.cpt"
        echo "head -1 slip.cpt | awk '{print \"B\",\$2}' >> slip.cpt"
        echo "echo "N white" >> slip.cpt"
        echo
        echo "Use colortool from Hdef package to make nice Coulomb stress color palette"
        echo "colortool -hue 270,270 -chroma 40,40 -lightness 20,40 -gmt -T-1e6/-1e5/5e4 > coul.cpt"
        echo "colortool -hue 270,180 -chroma 40,0 -lightness 40,100 -gmt -T-1e5/0/5e3 >> coul.cpt"
        echo "colortool -hue 100,10 -chroma 100,30 -lightness 100,50 -gmt -T0/1e5/5e3 >> coul.cpt"
        echo "colortool -hue 10,10 -chroma 30,30 -lightness 50,15 -gmt -T1e5/1e6/5e4 >> coul.cpt"
        echo "tail -1 coul.cpt | awk '{print "F",$2}' >> coul.cpt"
        echo "awk '{if($1!="#"){print "B",$2}}' coul.cpt >> coul.cpt"
        echo "echo N white >> coul.cpt"
    fi
    exit 1
}

#####
#	CONVERT SEPARATE R, G, B MATPLOTLIB DEFINITIONS TO UNIFORMLY SPACED VALUES
#####
function getVal () {
    echo $list |\
        sed -e "s/(//g" -e "s/)//g" |\
        awk -F, '{for(i=1;i<=NF;i++){print $i}}' |\
        awk '{
            x[NR] = $1
            y1[NR] = $2
            y2[NR] = $3
        }END{
            j = 1
            iistart = 0
            dx = x[j+1]-x[j]
            dy = y1[j+1]-y2[j]
            for (i=0;i<=999;i++) {
                ii = i/1000
                val = y2[j] + dy/dx*(ii-iistart)
                print val
                if (ii>=x[j+1]) {
                    j = j + 1
                    iistart = ii
                    dx = x[j+1]-x[j]
                    dy = y1[j+1]-y2[j]
                }
            }
        }'
}

#####
#	PARSE COMMAND LINE
#####
if [ $# -eq 0 ]
then
    usage
fi
CPT=""
OFILE=""
PSFILE=""
while [ "$1" != "" ]
do
    case $1 in
        -c)shift;CPT_FULL_OPT=$1;CPT=`echo $1 | awk -F, '{print $1}'`;;
        -o)shift;OFILE=$1;;
        -p)shift;PSFILE=$1;;
        -l)usage --list;;
        *)echo "Error: no option \"$1\""; usage;;
    esac
    shift
done
if [ -z "$CPT" ]
then
    echo "Error: Define color palette name with -c NAME"
    usage
fi
if [ -z "$OFILE" ]
then
    echo "Error: Define output color palette with -o CPTFILE"
    usage
fi

#####
#	DEFINE RGB TRIPLETS FOR CHOSEN COLOR PALETTES
#####
if [ "$CPT" == "binary" ]
then
    #binary
    red="(0. 1. 1.), (1. 0. 0.)"
    green="(0. 1. 1.), (1. 0. 0.)"
    blue="(0. 1. 1.), (1. 0. 0.)"
    FORMAT="SEPARATE"
elif [ "$CPT" == "bone" ]
then
    # bone
    red="(0. 0. 0.),
         (0.746032 0.652778 0.652778),
         (1.0 1.0 1.0)"
    green="(0. 0. 0.),
           (0.365079 0.319444 0.319444),
           (0.746032 0.777778 0.777778),
           (1.0 1.0 1.0)"
    blue="(0. 0. 0.),
                            (0.365079 0.444444 0.444444),
                            (1.0 1.0 1.0)"
    FORMAT="SEPARATE"

# Color Brewer palettes
elif [ $CPT == "brewerBlues" ]
then
    rgb="(0.96862745098039216  0.98431372549019602  1.0                ),
         (0.87058823529411766  0.92156862745098034  0.96862745098039216),
         (0.77647058823529413  0.85882352941176465  0.93725490196078431),
         (0.61960784313725492  0.792156862745098    0.88235294117647056),
         (0.41960784313725491  0.68235294117647061  0.83921568627450982),
         (0.25882352941176473  0.5725490196078431   0.77647058823529413),
         (0.12941176470588237  0.44313725490196076  0.70980392156862748),
         (0.03137254901960784  0.31764705882352939  0.61176470588235299),
         (0.03137254901960784  0.18823529411764706  0.41960784313725491)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerBlueGreen" ]
then
    rgb="(0.96862745098039216   0.9882352941176471    0.99215686274509807),
         (0.89803921568627454   0.96078431372549022   0.97647058823529409),
         (0.8                   0.92549019607843142   0.90196078431372551),
         (0.6                   0.84705882352941175   0.78823529411764703),
         (0.4                   0.76078431372549016   0.64313725490196083),
         (0.25490196078431371   0.68235294117647061   0.46274509803921571),
         (0.13725490196078433   0.54509803921568623   0.27058823529411763),
         (0.0                   0.42745098039215684   0.17254901960784313),
         (0.0                   0.26666666666666666   0.10588235294117647)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingBrownGreen" ]
then
    rgb="
        (0.32941176470588235   0.18823529411764706   0.0196078431372549 ),
        (0.5490196078431373    0.31764705882352939   0.0392156862745098 ),
        (0.74901960784313726   0.50588235294117645   0.17647058823529413),
        (0.87450980392156863   0.76078431372549016   0.49019607843137253),
        (0.96470588235294119   0.90980392156862744   0.76470588235294112),
            (0.96078431372549022   0.96078431372549022   0.96078431372549022),
        (0.7803921568627451    0.91764705882352937   0.89803921568627454),
        (0.50196078431372548   0.80392156862745101   0.75686274509803919),
        (0.20784313725490197   0.59215686274509804   0.5607843137254902 ),
        (0.00392156862745098   0.4                   0.36862745098039218),
        (0.0                   0.23529411764705882   0.18823529411764706)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerBluePurple" ]
then
    rgb="
        (0.96862745098039216   0.9882352941176471    0.99215686274509807),
        (0.8784313725490196    0.92549019607843142   0.95686274509803926),
        (0.74901960784313726   0.82745098039215681   0.90196078431372551),
        (0.61960784313725492   0.73725490196078436   0.85490196078431369),
        (0.5490196078431373    0.58823529411764708   0.77647058823529413),
        (0.5490196078431373    0.41960784313725491   0.69411764705882351),
        (0.53333333333333333   0.25490196078431371   0.61568627450980395),
        (0.50588235294117645   0.05882352941176471   0.48627450980392156),
        (0.30196078431372547   0.0                   0.29411764705882354)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerGreenBlue" ]
then
    rgb="
        (0.96862745098039216   0.9882352941176471    0.94117647058823528),
        (0.8784313725490196    0.95294117647058818   0.85882352941176465),
        (0.8                   0.92156862745098034   0.77254901960784317),
        (0.6588235294117647    0.8666666666666667    0.70980392156862748),
        (0.4823529411764706    0.8                   0.7686274509803922 ),
        (0.30588235294117649   0.70196078431372544   0.82745098039215681),
        (0.16862745098039217   0.5490196078431373    0.74509803921568629),
        (0.03137254901960784   0.40784313725490196   0.67450980392156867),
        (0.03137254901960784   0.25098039215686274   0.50588235294117645)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerGreens" ]
then
    rgb="
        (0.96862745098039216   0.9882352941176471    0.96078431372549022),
        (0.89803921568627454   0.96078431372549022   0.8784313725490196 ),
        (0.7803921568627451    0.9137254901960784    0.75294117647058822),
        (0.63137254901960782   0.85098039215686272   0.60784313725490191),
        (0.45490196078431372   0.7686274509803922    0.46274509803921571),
        (0.25490196078431371   0.6705882352941176    0.36470588235294116),
        (0.13725490196078433   0.54509803921568623   0.27058823529411763),
        (0.0                   0.42745098039215684   0.17254901960784313),
        (0.0                   0.26666666666666666   0.10588235294117647)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerGreys" ]
then
    rgb="
        (1.0                   1.0                   1.0                ),
        (0.94117647058823528   0.94117647058823528   0.94117647058823528),
        (0.85098039215686272   0.85098039215686272   0.85098039215686272),
        (0.74117647058823533   0.74117647058823533   0.74117647058823533),
        (0.58823529411764708   0.58823529411764708   0.58823529411764708),
        (0.45098039215686275   0.45098039215686275   0.45098039215686275),
        (0.32156862745098042   0.32156862745098042   0.32156862745098042),
        (0.14509803921568629   0.14509803921568629   0.14509803921568629),
        (0.0                   0.0                   0.0                )"
    FORMAT="STANDARD"
elif [ $CPT == "brewerOranges" ]
then
    rgb="
        (1.0                   0.96078431372549022   0.92156862745098034),
        (0.99607843137254903   0.90196078431372551   0.80784313725490198),
        (0.99215686274509807   0.81568627450980391   0.63529411764705879),
        (0.99215686274509807   0.68235294117647061   0.41960784313725491),
        (0.99215686274509807   0.55294117647058827   0.23529411764705882),
        (0.94509803921568625   0.41176470588235292   0.07450980392156863),
        (0.85098039215686272   0.28235294117647058   0.00392156862745098),
        (0.65098039215686276   0.21176470588235294   0.01176470588235294),
        (0.49803921568627452   0.15294117647058825   0.01568627450980392)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerOrangeRed" ]
then
    rgb="
        (1.0                   0.96862745098039216   0.92549019607843142),
        (0.99607843137254903   0.90980392156862744   0.78431372549019607),
        (0.99215686274509807   0.83137254901960789   0.61960784313725492),
        (0.99215686274509807   0.73333333333333328   0.51764705882352946),
        (0.9882352941176471    0.55294117647058827   0.34901960784313724),
        (0.93725490196078431   0.396078431372549     0.28235294117647058),
        (0.84313725490196079   0.18823529411764706   0.12156862745098039),
        (0.70196078431372544   0.0                   0.0                ),
        (0.49803921568627452   0.0                   0.0                )"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingPinkYellowGreen" ]
then
    rgb="
        (0.55686274509803924   0.00392156862745098   0.32156862745098042),
        (0.77254901960784317   0.10588235294117647   0.49019607843137253),
        (0.87058823529411766   0.46666666666666667   0.68235294117647061),
        (0.94509803921568625   0.71372549019607845   0.85490196078431369),
        (0.99215686274509807   0.8784313725490196    0.93725490196078431),
        (0.96862745098039216   0.96862745098039216   0.96862745098039216),
        (0.90196078431372551   0.96078431372549022   0.81568627450980391),
        (0.72156862745098038   0.88235294117647056   0.52549019607843139),
        (0.49803921568627452   0.73725490196078436   0.25490196078431371),
        (0.30196078431372547   0.5725490196078431    0.12941176470588237),
        (0.15294117647058825   0.39215686274509803   0.09803921568627451)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingPurpleGreen" ]
then
    rgb="
        (0.25098039215686274   0.0                   0.29411764705882354),
        (0.46274509803921571   0.16470588235294117   0.51372549019607838),
        (0.6                   0.4392156862745098    0.6705882352941176 ),
        (0.76078431372549016   0.6470588235294118    0.81176470588235294),
        (0.90588235294117647   0.83137254901960789   0.90980392156862744),
        (0.96862745098039216   0.96862745098039216   0.96862745098039216),
        (0.85098039215686272   0.94117647058823528   0.82745098039215681),
        (0.65098039215686276   0.85882352941176465   0.62745098039215685),
        (0.35294117647058826   0.68235294117647061   0.38039215686274508),
        (0.10588235294117647   0.47058823529411764   0.21568627450980393),
        (0.0                   0.26666666666666666   0.10588235294117647)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerPurpleBlue" ]
then
    rgb="
        (1.0                   0.96862745098039216   0.98431372549019602),
        (0.92549019607843142   0.90588235294117647   0.94901960784313721),
        (0.81568627450980391   0.81960784313725488   0.90196078431372551),
        (0.65098039215686276   0.74117647058823533   0.85882352941176465),
        (0.45490196078431372   0.66274509803921566   0.81176470588235294),
        (0.21176470588235294   0.56470588235294117   0.75294117647058822),
        (0.0196078431372549    0.4392156862745098    0.69019607843137254),
        (0.01568627450980392   0.35294117647058826   0.55294117647058827),
        (0.00784313725490196   0.2196078431372549    0.34509803921568627)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerPurpleBlueGreen" ]
then
    rgb="
        (1.0                   0.96862745098039216   0.98431372549019602),
        (0.92549019607843142   0.88627450980392153   0.94117647058823528),
        (0.81568627450980391   0.81960784313725488   0.90196078431372551),
        (0.65098039215686276   0.74117647058823533   0.85882352941176465),
        (0.40392156862745099   0.66274509803921566   0.81176470588235294),
        (0.21176470588235294   0.56470588235294117   0.75294117647058822),
        (0.00784313725490196   0.50588235294117645   0.54117647058823526),
        (0.00392156862745098   0.42352941176470588   0.34901960784313724),
        (0.00392156862745098   0.27450980392156865   0.21176470588235294)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingPurpleOrange" ]
then
    rgb="
        (0.49803921568627452   0.23137254901960785   0.03137254901960784),
        (0.70196078431372544   0.34509803921568627   0.02352941176470588),
        (0.8784313725490196    0.50980392156862742   0.07843137254901961),
        (0.99215686274509807   0.72156862745098038   0.38823529411764707),
        (0.99607843137254903   0.8784313725490196    0.71372549019607845),
        (0.96862745098039216   0.96862745098039216   0.96862745098039216),
        (0.84705882352941175   0.85490196078431369   0.92156862745098034),
        (0.69803921568627447   0.6705882352941176    0.82352941176470584),
        (0.50196078431372548   0.45098039215686275   0.67450980392156867),
        (0.32941176470588235   0.15294117647058825   0.53333333333333333),
        (0.17647058823529413   0.0                   0.29411764705882354)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerPurpleRed" ]
then
    rgb="
        (0.96862745098039216   0.95686274509803926   0.97647058823529409),
        (0.90588235294117647   0.88235294117647056   0.93725490196078431),
        (0.83137254901960789   0.72549019607843135   0.85490196078431369),
        (0.78823529411764703   0.58039215686274515   0.7803921568627451 ),
        (0.87450980392156863   0.396078431372549     0.69019607843137254),
        (0.90588235294117647   0.16078431372549021   0.54117647058823526),
        (0.80784313725490198   0.07058823529411765   0.33725490196078434),
        (0.59607843137254901   0.0                   0.2627450980392157 ),
        (0.40392156862745099   0.0                   0.12156862745098039)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerPurples" ]
then
    rgb="
        (0.9882352941176471    0.98431372549019602   0.99215686274509807),
        (0.93725490196078431   0.92941176470588238   0.96078431372549022),
        (0.85490196078431369   0.85490196078431369   0.92156862745098034),
        (0.73725490196078436   0.74117647058823533   0.86274509803921573),
        (0.61960784313725492   0.60392156862745094   0.78431372549019607),
        (0.50196078431372548   0.49019607843137253   0.72941176470588232),
        (0.41568627450980394   0.31764705882352939   0.63921568627450975),
        (0.32941176470588235   0.15294117647058825   0.5607843137254902 ),
        (0.24705882352941178   0.0                   0.49019607843137253)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingRedBlue" ]
then
    rgb="
        (0.40392156862745099   0.0                   0.12156862745098039),
        (0.69803921568627447   0.09411764705882353   0.16862745098039217),
        (0.83921568627450982   0.37647058823529411   0.30196078431372547),
        (0.95686274509803926   0.6470588235294118    0.50980392156862742),
        (0.99215686274509807   0.85882352941176465   0.7803921568627451 ),
        (0.96862745098039216   0.96862745098039216   0.96862745098039216),
        (0.81960784313725488   0.89803921568627454   0.94117647058823528),
        (0.5725490196078431    0.77254901960784317   0.87058823529411766),
        (0.2627450980392157    0.57647058823529407   0.76470588235294112),
        (0.12941176470588237   0.4                   0.67450980392156867),
        (0.0196078431372549    0.18823529411764706   0.38039215686274508)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingRedGrey" ]
then
    rgb="
        (0.40392156862745099   0.0                   0.12156862745098039),
        (0.69803921568627447   0.09411764705882353   0.16862745098039217),
        (0.83921568627450982   0.37647058823529411   0.30196078431372547),
        (0.95686274509803926   0.6470588235294118    0.50980392156862742),
        (0.99215686274509807   0.85882352941176465   0.7803921568627451 ),
        (1.0                   1.0                   1.0                ),
        (0.8784313725490196    0.8784313725490196    0.8784313725490196 ),
        (0.72941176470588232   0.72941176470588232   0.72941176470588232),
        (0.52941176470588236   0.52941176470588236   0.52941176470588236),
        (0.30196078431372547   0.30196078431372547   0.30196078431372547),
        (0.10196078431372549   0.10196078431372549   0.10196078431372549)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerRedPurple" ]
then
    rgb="
        (1.0                   0.96862745098039216   0.95294117647058818),
        (0.99215686274509807   0.8784313725490196    0.86666666666666667),
        (0.9882352941176471    0.77254901960784317   0.75294117647058822),
        (0.98039215686274506   0.62352941176470589   0.70980392156862748),
        (0.96862745098039216   0.40784313725490196   0.63137254901960782),
        (0.86666666666666667   0.20392156862745098   0.59215686274509804),
        (0.68235294117647061   0.00392156862745098   0.49411764705882355),
        (0.47843137254901963   0.00392156862745098   0.46666666666666667),
        (0.28627450980392155   0.0                   0.41568627450980394)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingRedYellowBlue" ]
then
    rgb="
        (0.6470588235294118   0.0                   0.14901960784313725),
        (0.84313725490196079  0.18823529411764706   0.15294117647058825),
        (0.95686274509803926  0.42745098039215684   0.2627450980392157 ),
        (0.99215686274509807  0.68235294117647061   0.38039215686274508),
        (0.99607843137254903  0.8784313725490196    0.56470588235294117),
        (1.0                  1.0                   0.74901960784313726),
        (0.8784313725490196   0.95294117647058818   0.97254901960784312),
        (0.6705882352941176   0.85098039215686272   0.9137254901960784 ),
        (0.45490196078431372  0.67843137254901964   0.81960784313725488),
        (0.27058823529411763  0.45882352941176469   0.70588235294117652),
        (0.19215686274509805  0.21176470588235294   0.58431372549019611)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingRedYellowGreen" ]
then
    rgb="
        (0.6470588235294118   0.0                   0.14901960784313725),
        (0.84313725490196079  0.18823529411764706   0.15294117647058825),
        (0.95686274509803926  0.42745098039215684   0.2627450980392157 ),
        (0.99215686274509807  0.68235294117647061   0.38039215686274508),
        (0.99607843137254903  0.8784313725490196    0.54509803921568623),
        (1.0                  1.0                   0.74901960784313726),
        (0.85098039215686272  0.93725490196078431   0.54509803921568623),
        (0.65098039215686276  0.85098039215686272   0.41568627450980394),
        (0.4                  0.74117647058823533   0.38823529411764707),
        (0.10196078431372549  0.59607843137254901   0.31372549019607843),
        (0.0                  0.40784313725490196   0.21568627450980393)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerReds" ]
then
    rgb="
        (1.0                  0.96078431372549022   0.94117647058823528),
        (0.99607843137254903  0.8784313725490196    0.82352941176470584),
        (0.9882352941176471   0.73333333333333328   0.63137254901960782),
        (0.9882352941176471   0.5725490196078431    0.44705882352941179),
        (0.98431372549019602  0.41568627450980394   0.29019607843137257),
        (0.93725490196078431  0.23137254901960785   0.17254901960784313),
        (0.79607843137254897  0.094117647058823528  0.11372549019607843),
        (0.6470588235294118   0.058823529411764705  0.08235294117647058),
        (0.40392156862745099  0.0                   0.05098039215686274)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerDivergingSpectral" ]
then
    rgb="
        (0.61960784313725492  0.003921568627450980  0.25882352941176473),
        (0.83529411764705885  0.24313725490196078   0.30980392156862746),
        (0.95686274509803926  0.42745098039215684   0.2627450980392157 ),
        (0.99215686274509807  0.68235294117647061   0.38039215686274508),
        (0.99607843137254903  0.8784313725490196    0.54509803921568623),
        (1.0                  1.0                   0.74901960784313726),
        (0.90196078431372551  0.96078431372549022   0.59607843137254901),
        (0.6705882352941176   0.8666666666666667    0.64313725490196083),
        (0.4                  0.76078431372549016   0.6470588235294118 ),
        (0.19607843137254902  0.53333333333333333   0.74117647058823533),
        (0.36862745098039218  0.30980392156862746   0.63529411764705879)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerYellowGreen" ]
then
    rgb="
        (1.0                  1.0                   0.89803921568627454),
        (0.96862745098039216  0.9882352941176471    0.72549019607843135),
        (0.85098039215686272  0.94117647058823528   0.63921568627450975),
        (0.67843137254901964  0.8666666666666667    0.55686274509803924),
        (0.47058823529411764  0.77647058823529413   0.47450980392156861),
        (0.25490196078431371  0.6705882352941176    0.36470588235294116),
        (0.13725490196078433  0.51764705882352946   0.2627450980392157 ),
        (0.0                  0.40784313725490196   0.21568627450980393),
        (0.0                  0.27058823529411763   0.16078431372549021)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerYellowGreenBlue" ]
then
    rgb="
        (1.0                  1.0                   0.85098039215686272),
        (0.92941176470588238  0.97254901960784312   0.69411764705882351),
        (0.7803921568627451   0.9137254901960784    0.70588235294117652),
        (0.49803921568627452  0.80392156862745101   0.73333333333333328),
        (0.25490196078431371  0.71372549019607845   0.7686274509803922 ),
        (0.11372549019607843  0.56862745098039214   0.75294117647058822),
        (0.13333333333333333  0.36862745098039218   0.6588235294117647 ),
        (0.14509803921568629  0.20392156862745098   0.58039215686274515),
        (0.03137254901960784  0.11372549019607843   0.34509803921568627)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerYellowOrangeBrown" ]
then
    rgb="
        (1.0                  1.0                   0.89803921568627454),
        (1.0                  0.96862745098039216   0.73725490196078436),
        (0.99607843137254903  0.8901960784313725    0.56862745098039214),
        (0.99607843137254903  0.7686274509803922    0.30980392156862746),
        (0.99607843137254903  0.6                   0.16078431372549021),
        (0.92549019607843142  0.4392156862745098    0.07843137254901961),
        (0.8                  0.29803921568627451   0.00784313725490196),
        (0.6                  0.20392156862745098   0.01568627450980392),
        (0.4                  0.14509803921568629   0.02352941176470588)"
    FORMAT="STANDARD"
elif [ $CPT == "brewerYellowOrangeRed" ]
then
    rgb="
        (1.0                  1.0                   0.8                ),
        (1.0                  0.92941176470588238   0.62745098039215685),
        (0.99607843137254903  0.85098039215686272   0.46274509803921571),
        (0.99607843137254903  0.69803921568627447   0.29803921568627451),
        (0.99215686274509807  0.55294117647058827   0.23529411764705882),
        (0.9882352941176471   0.30588235294117649   0.16470588235294117),
        (0.8901960784313725   0.10196078431372549   0.10980392156862745),
        (0.74117647058823533  0.0                   0.14901960784313725),
        (0.50196078431372548  0.0                   0.14901960784313725)"
    FORMAT="STANDARD"
elif [ $CPT == "morelandCoolWarm" ]
then
    # "Diverging Color Maps for Scientific Visualization" by Kenneth Moreland.
    # http://www.kennethmoreland.com/color-maps
    rgb="(0 0 0),
        (0.231373 0.298039 0.752941),
        (0.235294 0.305882 0.760784),
        (0.239216 0.313725 0.764706),
        (0.243137 0.317647 0.772549),
        (0.247059 0.32549 0.776471),
        (0.25098 0.333333 0.784314),
        (0.258824 0.341176 0.788235),
        (0.262745 0.345098 0.796078),
        (0.266667 0.352941 0.8),
        (0.270588 0.360784 0.807843),
        (0.27451 0.364706 0.811765),
        (0.278431 0.372549 0.819608),
        (0.286275 0.380392 0.823529),
        (0.290196 0.388235 0.827451),
        (0.294118 0.392157 0.835294),
        (0.298039 0.4 0.839216),
        (0.301961 0.407843 0.843137),
        (0.309804 0.411765 0.85098),
        (0.313725 0.419608 0.854902),
        (0.317647 0.427451 0.858824),
        (0.321569 0.431373 0.866667),
        (0.329412 0.439216 0.870588),
        (0.333333 0.447059 0.87451),
        (0.337255 0.45098 0.878431),
        (0.341176 0.458824 0.882353),
        (0.34902 0.466667 0.886275),
        (0.352941 0.470588 0.894118),
        (0.356863 0.478431 0.898039),
        (0.364706 0.482353 0.901961),
        (0.368627 0.490196 0.905882),
        (0.372549 0.498039 0.909804),
        (0.376471 0.501961 0.913725),
        (0.384314 0.509804 0.917647),
        (0.388235 0.513725 0.921569),
        (0.392157 0.521569 0.92549),
        (0.4 0.529412 0.929412),
        (0.403922 0.533333 0.933333),
        (0.407843 0.541176 0.937255),
        (0.415686 0.545098 0.937255),
        (0.419608 0.552941 0.941176),
        (0.423529 0.556863 0.945098),
        (0.431373 0.564706 0.94902),
        (0.435294 0.568627 0.952941),
        (0.439216 0.576471 0.952941),
        (0.447059 0.580392 0.956863),
        (0.45098 0.588235 0.960784),
        (0.454902 0.592157 0.964706),
        (0.462745 0.6 0.964706),
        (0.466667 0.603922 0.968627),
        (0.470588 0.611765 0.968627),
        (0.478431 0.615686 0.972549),
        (0.482353 0.619608 0.976471),
        (0.486275 0.627451 0.976471),
        (0.494118 0.631373 0.980392),
        (0.498039 0.639216 0.980392),
        (0.505882 0.643137 0.984314),
        (0.509804 0.647059 0.984314),
        (0.513725 0.654902 0.988235),
        (0.521569 0.658824 0.988235),
        (0.52549 0.662745 0.988235),
        (0.529412 0.670588 0.992157),
        (0.537255 0.67451 0.992157),
        (0.541176 0.678431 0.992157),
        (0.54902 0.682353 0.996078),
        (0.552941 0.690196 0.996078),
        (0.556863 0.694118 0.996078),
        (0.564706 0.698039 0.996078),
        (0.568627 0.701961 0.996078),
        (0.576471 0.709804 1),
        (0.580392 0.713725 1),
        (0.584314 0.717647 1),
        (0.592157 0.721569 1),
        (0.596078 0.72549 1),
        (0.6 0.729412 1),
        (0.607843 0.733333 1),
        (0.611765 0.737255 1),
        (0.619608 0.745098 1),
        (0.623529 0.74902 1),
        (0.627451 0.752941 1),
        (0.635294 0.756863 1),
        (0.639216 0.760784 1),
        (0.643137 0.764706 0.996078),
        (0.65098 0.768627 0.996078),
        (0.654902 0.772549 0.996078),
        (0.658824 0.776471 0.996078),
        (0.666667 0.780392 0.992157),
        (0.670588 0.780392 0.992157),
        (0.67451 0.784314 0.992157),
        (0.682353 0.788235 0.992157),
        (0.686275 0.792157 0.988235),
        (0.690196 0.796078 0.988235),
        (0.698039 0.8 0.984314),
        (0.701961 0.803922 0.984314),
        (0.705882 0.803922 0.984314),
        (0.713725 0.807843 0.980392),
        (0.717647 0.811765 0.980392),
        (0.721569 0.815686 0.976471),
        (0.72549 0.815686 0.972549),
        (0.733333 0.819608 0.972549),
        (0.737255 0.823529 0.968627),
        (0.741176 0.823529 0.968627),
        (0.745098 0.827451 0.964706),
        (0.752941 0.831373 0.960784),
        (0.756863 0.831373 0.960784),
        (0.760784 0.835294 0.956863),
        (0.764706 0.835294 0.952941),
        (0.772549 0.839216 0.952941),
        (0.776471 0.839216 0.94902),
        (0.780392 0.843137 0.945098),
        (0.784314 0.843137 0.941176),
        (0.788235 0.847059 0.937255),
        (0.796078 0.847059 0.933333),
        (0.8 0.85098 0.933333),
        (0.803922 0.85098 0.929412),
        (0.807843 0.85098 0.92549),
        (0.811765 0.854902 0.921569),
        (0.815686 0.854902 0.917647),
        (0.819608 0.858824 0.913725),
        (0.823529 0.858824 0.909804),
        (0.827451 0.858824 0.905882),
        (0.835294 0.858824 0.901961),
        (0.839216 0.862745 0.898039),
        (0.843137 0.862745 0.894118),
        (0.847059 0.862745 0.890196),
        (0.85098 0.862745 0.882353),
        (0.854902 0.862745 0.878431),
        (0.858824 0.862745 0.87451),
        (0.862745 0.866667 0.870588),
        (0.866667 0.866667 0.866667),
        (0.870588 0.862745 0.858824),
        (0.87451 0.862745 0.854902),
        (0.878431 0.858824 0.847059),
        (0.882353 0.858824 0.843137),
        (0.886275 0.854902 0.839216),
        (0.890196 0.854902 0.831373),
        (0.894118 0.85098 0.827451),
        (0.898039 0.847059 0.819608),
        (0.901961 0.847059 0.815686),
        (0.905882 0.843137 0.807843),
        (0.909804 0.843137 0.803922),
        (0.909804 0.839216 0.796078),
        (0.913725 0.835294 0.792157),
        (0.917647 0.831373 0.784314),
        (0.921569 0.831373 0.780392),
        (0.92549 0.827451 0.772549),
        (0.92549 0.823529 0.768627),
        (0.929412 0.819608 0.760784),
        (0.933333 0.819608 0.756863),
        (0.933333 0.815686 0.74902),
        (0.937255 0.811765 0.745098),
        (0.941176 0.807843 0.737255),
        (0.941176 0.803922 0.733333),
        (0.945098 0.8 0.72549),
        (0.945098 0.796078 0.721569),
        (0.94902 0.792157 0.713725),
        (0.94902 0.788235 0.709804),
        (0.952941 0.784314 0.701961),
        (0.952941 0.780392 0.698039),
        (0.956863 0.776471 0.690196),
        (0.956863 0.772549 0.682353),
        (0.960784 0.768627 0.678431),
        (0.960784 0.764706 0.670588),
        (0.960784 0.760784 0.666667),
        (0.960784 0.756863 0.658824),
        (0.964706 0.752941 0.654902),
        (0.964706 0.74902 0.647059),
        (0.964706 0.745098 0.639216),
        (0.964706 0.737255 0.635294),
        (0.968627 0.733333 0.627451),
        (0.968627 0.729412 0.623529),
        (0.968627 0.72549 0.615686),
        (0.968627 0.721569 0.611765),
        (0.968627 0.713725 0.603922),
        (0.968627 0.709804 0.596078),
        (0.968627 0.705882 0.592157),
        (0.968627 0.698039 0.584314),
        (0.968627 0.694118 0.580392),
        (0.968627 0.690196 0.572549),
        (0.968627 0.682353 0.568627),
        (0.968627 0.678431 0.560784),
        (0.968627 0.67451 0.552941),
        (0.968627 0.666667 0.54902),
        (0.968627 0.662745 0.541176),
        (0.968627 0.654902 0.537255),
        (0.968627 0.65098 0.529412),
        (0.964706 0.643137 0.52549),
        (0.964706 0.639216 0.517647),
        (0.964706 0.631373 0.513725),
        (0.964706 0.627451 0.505882),
        (0.960784 0.619608 0.498039),
        (0.960784 0.615686 0.494118),
        (0.960784 0.607843 0.486275),
        (0.956863 0.603922 0.482353),
        (0.956863 0.596078 0.47451),
        (0.956863 0.592157 0.470588),
        (0.952941 0.584314 0.462745),
        (0.952941 0.576471 0.458824),
        (0.94902 0.572549 0.45098),
        (0.94902 0.564706 0.447059),
        (0.945098 0.556863 0.439216),
        (0.945098 0.552941 0.435294),
        (0.941176 0.545098 0.427451),
        (0.941176 0.537255 0.423529),
        (0.937255 0.533333 0.415686),
        (0.933333 0.52549 0.411765),
        (0.933333 0.517647 0.403922),
        (0.929412 0.509804 0.4),
        (0.92549 0.505882 0.392157),
        (0.92549 0.498039 0.388235),
        (0.921569 0.490196 0.380392),
        (0.917647 0.482353 0.376471),
        (0.913725 0.47451 0.372549),
        (0.913725 0.470588 0.364706),
        (0.909804 0.462745 0.360784),
        (0.905882 0.454902 0.352941),
        (0.901961 0.447059 0.34902),
        (0.898039 0.439216 0.345098),
        (0.894118 0.431373 0.337255),
        (0.890196 0.423529 0.333333),
        (0.890196 0.415686 0.32549),
        (0.886275 0.407843 0.321569),
        (0.882353 0.4 0.317647),
        (0.878431 0.392157 0.309804),
        (0.87451 0.384314 0.305882),
        (0.870588 0.376471 0.301961),
        (0.866667 0.368627 0.294118),
        (0.862745 0.360784 0.290196),
        (0.854902 0.352941 0.286275),
        (0.85098 0.345098 0.278431),
        (0.847059 0.337255 0.27451),
        (0.843137 0.329412 0.270588),
        (0.839216 0.321569 0.262745),
        (0.835294 0.313725 0.258824),
        (0.831373 0.305882 0.254902),
        (0.823529 0.294118 0.25098),
        (0.819608 0.286275 0.243137),
        (0.815686 0.278431 0.239216),
        (0.811765 0.270588 0.235294),
        (0.803922 0.258824 0.231373),
        (0.8 0.25098 0.223529),
        (0.796078 0.243137 0.219608),
        (0.792157 0.231373 0.215686),
        (0.784314 0.223529 0.211765),
        (0.780392 0.211765 0.207843),
        (0.776471 0.2 0.203922),
        (0.768627 0.192157 0.196078),
        (0.764706 0.180392 0.192157),
        (0.756863 0.168627 0.188235),
        (0.752941 0.156863 0.184314),
        (0.745098 0.145098 0.180392),
        (0.741176 0.133333 0.176471),
        (0.737255 0.117647 0.172549),
        (0.729412 0.101961 0.168627),
        (0.72549 0.0862745 0.160784),
        (0.717647 0.0666667 0.156863),
        (0.709804 0.0431373 0.152941),
        (0.705882 0.0156863 0.14902)"
    FORMAT="STANDARD"
elif [ $CPT == "wistia" ]
then
    # An MIT licensed, colorblind-friendly heatmap from Wistia:
    #   https://github.com/wistia/heatmap-palette
    #   http://wistia.com/blog/heatmaps-for-colorblindness
    #
    # >>> import matplotlib.colors as c
    # >>> colors = ["#e4ff7a", "#ffe81a", "#ffbd00", "#ffa000", "#fc7f00"]
    # >>> cm = c.LinearSegmentedColormap.from_list('wistia', colors)
    # >>> _wistia_data = cm._segmentdata
    # >>> del _wistia_data['alpha']
    red="(0.0  0.8941176470588236  0.8941176470588236),
         (0.25  1.0  1.0),
         (0.5  1.0  1.0),
         (0.75  1.0  1.0),
         (1.0  0.9882352941176471  0.9882352941176471)"
    green="(0.0  1.0  1.0),
           (0.25  0.9098039215686274  0.9098039215686274),
           (0.5  0.7411764705882353  0.7411764705882353),
           (0.75  0.6274509803921569  0.6274509803921569),
           (1.0  0.4980392156862745  0.4980392156862745)"
    blue="(0.0  0.47843137254901963  0.47843137254901963),
          (0.25  0.10196078431372549  0.10196078431372549),
          (0.5  0.0  0.0),
          (0.75  0.0  0.0),
          (1.0  0.0  0.0)"
    FORMAT="SEPARATE"
elif [ $CPT == "cmrmap" ]
then
    # Implementation of Carey Rappaport's CMRmap.
    # See `A Color Map for Effective Black-and-White Rendering of Color-Scale
    # Images' by Carey Rappaport
    # http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m
    red="(0.000  0.00  0.00),
          (0.125  0.15  0.15),
          (0.250  0.30  0.30),
          (0.375  0.60  0.60),
          (0.500  1.00  1.00),
          (0.625  0.90  0.90),
          (0.750  0.90  0.90),
          (0.875  0.90  0.90),
          (1.000  1.00  1.00)"
    green="(0.000  0.00  0.00),
          (0.125  0.15  0.15),
          (0.250  0.15  0.15),
          (0.375  0.20  0.20),
          (0.500  0.25  0.25),
          (0.625  0.50  0.50),
          (0.750  0.75  0.75),
          (0.875  0.90  0.90),
          (1.000  1.00  1.00)"
    blue="(0.000  0.00  0.00),
          (0.125  0.50  0.50),
          (0.250  0.75  0.75),
          (0.375  0.50  0.50),
          (0.500  0.15  0.15),
          (0.625  0.00  0.00),
          (0.750  0.10  0.10),
          (0.875  0.50  0.50),
          (1.000  1.00  1.00)"
    FORMAT="SEPARATE"
elif [ $CPT == "gistEarth" ]
then
    # The next 7 palettes are from the Yorick scientific visalisation package,
    # an evolution of the GIST package, both by David H. Munro.
    # They are released under a BSD-like license (see LICENSE_YORICK in
    # the license directory of the matplotlib source distribution).
    #
    # Most palette functions have been reduced to simple function descriptions
    # by Reinier Heeres, since the rgb components were mostly straight lines.
    # gist_earth_data and gist_ncar_data were simplified by a script and some
    # manual effort.
    red="(0.0  0.0  0.0000),
        (0.2824  0.1882  0.1882),
        (0.4588  0.2714  0.2714),
        (0.5490  0.4719  0.4719),
        (0.6980  0.7176  0.7176),
        (0.7882  0.7553  0.7553),
        (1.0000  0.9922  0.9922)"
    green="(0.0  0.0  0.0000),
        (0.0275  0.0000  0.0000),
        (0.1098  0.1893  0.1893),
        (0.1647  0.3035  0.3035),
        (0.2078  0.3841  0.3841),
        (0.2824  0.5020  0.5020),
        (0.5216  0.6397  0.6397),
        (0.6980  0.7171  0.7171),
        (0.7882  0.6392  0.6392),
        (0.7922  0.6413  0.6413),
        (0.8000  0.6447  0.6447),
        (0.8078  0.6481  0.6481),
        (0.8157  0.6549  0.6549),
        (0.8667  0.6991  0.6991),
        (0.8745  0.7103  0.7103),
        (0.8824  0.7216  0.7216),
        (0.8902  0.7323  0.7323),
        (0.8980  0.7430  0.7430),
        (0.9412  0.8275  0.8275),
        (0.9569  0.8635  0.8635),
        (0.9647  0.8816  0.8816),
        (0.9961  0.9733  0.9733),
        (1.0000  0.9843  0.9843)"
    blue="(0.0  0.0  0.0000),
        (0.0039  0.1684  0.1684),
        (0.0078  0.2212  0.2212),
        (0.0275  0.4329  0.4329),
        (0.0314  0.4549  0.4549),
        (0.2824  0.5004  0.5004),
        (0.4667  0.2748  0.2748),
        (0.5451  0.3205  0.3205),
        (0.7843  0.3961  0.3961),
        (0.8941  0.6651  0.6651),
        (1.0000  0.9843  0.9843)"
    FORMAT="SEPARATE"
elif [ $CPT == "gistHeat" ]
then
    rgb=`echo 0 999 |\
         awk '{
             for (i=$1; i<=$2; i++) {
                 r = 1.5*(i/1000); if(r<0){r=0}; if(r>1){r=1}
                 g = 2*(i/1000)-1; if(g<0){g=0}; if(g>1){g=1}
                 b = 4*(i/1000)-3; if(b<0){b=0}; if(b>1){b=1}
                 print "("r,g,b"),"
             }
         }'`
    FORMAT="STANDARD"
elif [ $CPT == "awernawelfhjnawe" ]
then

rgb="
_gist_ncar_data = \
{'red': (
    (0.0, 0.0, 0.0000),
    (0.3098, 0.0000, 0.0000),
    (0.3725, 0.3993, 0.3993),
    (0.4235, 0.5003, 0.5003),
    (0.5333, 1.0000, 1.0000),
    (0.7922, 1.0000, 1.0000),
    (0.8471, 0.6218, 0.6218),
    (0.8980, 0.9235, 0.9235),
    (1.0000, 0.9961, 0.9961),
), 'green': (
    (0.0, 0.0, 0.0000),
    (0.0510, 0.3722, 0.3722),
    (0.1059, 0.0000, 0.0000),
    (0.1569, 0.7202, 0.7202),
    (0.1608, 0.7537, 0.7537),
    (0.1647, 0.7752, 0.7752),
    (0.2157, 1.0000, 1.0000),
    (0.2588, 0.9804, 0.9804),
    (0.2706, 0.9804, 0.9804),
    (0.3176, 1.0000, 1.0000),
    (0.3686, 0.8081, 0.8081),
    (0.4275, 1.0000, 1.0000),
    (0.5216, 1.0000, 1.0000),
    (0.6314, 0.7292, 0.7292),
    (0.6863, 0.2796, 0.2796),
    (0.7451, 0.0000, 0.0000),
    (0.7922, 0.0000, 0.0000),
    (0.8431, 0.1753, 0.1753),
    (0.8980, 0.5000, 0.5000),
    (1.0000, 0.9725, 0.9725),
), 'blue': (
    (0.0, 0.5020, 0.5020),
    (0.0510, 0.0222, 0.0222),
    (0.1098, 1.0000, 1.0000),
    (0.2039, 1.0000, 1.0000),
    (0.2627, 0.6145, 0.6145),
    (0.3216, 0.0000, 0.0000),
    (0.4157, 0.0000, 0.0000),
    (0.4745, 0.2342, 0.2342),
    (0.5333, 0.0000, 0.0000),
    (0.5804, 0.0000, 0.0000),
    (0.6314, 0.0549, 0.0549),
    (0.6902, 0.0000, 0.0000),
    (0.7373, 0.0000, 0.0000),
    (0.7922, 0.9738, 0.9738),
    (0.8000, 1.0000, 1.0000),
    (0.8431, 1.0000, 1.0000),
    (0.8980, 0.9341, 0.9341),
    (1.0000, 0.9961, 0.9961),
)}

_gist_rainbow_data = (
        (0.000, (1.00, 0.00, 0.16)),
        (0.030, (1.00, 0.00, 0.00)),
        (0.215, (1.00, 1.00, 0.00)),
        (0.400, (0.00, 1.00, 0.00)),
        (0.586, (0.00, 1.00, 1.00)),
        (0.770, (0.00, 0.00, 1.00)),
        (0.954, (1.00, 0.00, 1.00)),
        (1.000, (1.00, 0.00, 0.75))
)

_gist_stern_data = {
        'red': (
            (0.000, 0.000, 0.000), (0.0547, 1.000, 1.000),
            (0.250, 0.027, 0.250),  # (0.2500, 0.250, 0.250),
            (1.000, 1.000, 1.000)),
        'green': ((0, 0, 0), (1, 1, 1)),
        'blue': (
            (0.000, 0.000, 0.000), (0.500, 1.000, 1.000),
            (0.735, 0.000, 0.000), (1.000, 1.000, 1.000))
}"
elif [ $CPT == "gnuplot2" ]
then
    rgb=`echo 0 999 |\
         awk '{
             for (i=$1; i<=$2; i++) {
                 r = (i/1000)/0.32-0.78125; if(r<0){r=0}; if(r>1){r=1}
                 g = 2*(i/1000)-0.84; if(g<0){g=0}; if(g>1){g=1}
                 if (i/1000<0.25) {
                     b = 4*(i/1000)
                 } else if (i/1000<0.92) {
                     b = -2*(i/1000) + 1.84
                 } else {
                     b = (i/1000)/0.08 - 11.5
                 };  if(b<0){b=0}; if(b>1){b=1}
                 print "("r,g,b"),"
             }
         }'`
    FORMAT="STANDARD"
elif [ $CPT == "Hdef_topo_bold" ]
then
    ZMIN=`echo $CPT_FULL_OPT | awk -F, '{print $2}'`
    ZMAX=`echo $CPT_FULL_OPT | awk -F, '{print $3}'`
    OKAY=`echo $ZMIN $ZMAX |\
        awk '{
            if($1>0){print "ZMIN must be <=0"}
            else if($2<0){print "ZMAX must be >=0"}
            else {print "OKAY"}
        }'`
    if [ "$OKAY" != "OKAY" ]; then echo $OKAY; exit 1; fi
    colortool -hue 300,180 -chroma 50,0 -lightness 5,100 -gmt -T$ZMIN/0/1 > $OFILE
    colortool -hue 150,60 -chroma 50,0 -lightness 25,100 -gmt -T0/$ZMAX/1 >> $OFILE
    tail -1 $OFILE | awk '{print "F",$2}' >> $OFILE
    head -1 $OFILE | awk '{print "B",$2}' >> $OFILE
    exit
else
    echo "No color option named \"$CPT\""
    exit 1
fi

#####
#	COMPUTE RGB TRIPLETS AND PUT IN GMT CPT FORMAT
#####
if [ "$FORMAT" == "SEPARATE" ]
then
    list=$red
    getVal > rrr.tmp
    list=$green
    getVal > ggg.tmp
    list=$blue
    getVal > bbb.tmp
    paste rrr.tmp ggg.tmp bbb.tmp |\
        awk '{
            r = $1*255; if(r<0){r=0}; if(r>255){r=255}
            g = $2*255; if(g<0){g=0}; if(g>255){g=255}
            b = $3*255; if(b<0){b=0}; if(b>255){b=255}
            print NR, r"/"g"/"b, NR+1, r"/"g"/"b
        }' > gmtcpttmp.cpt
    rm rrr.tmp ggg.tmp bbb.tmp
elif [ "$FORMAT" == "STANDARD" ]
then
    echo $rgb |\
        sed -e "s/(//g" -e "s/)//g" |\
        awk -F, '{for(i=1;i<=NF;i++){print $i}}' |\
        awk '{
            if (NR>1) {
                print NR,r"/"g"/"b,NR+1,$1*255"/"$2*255"/"$3*255
            }
            r=$1*255
            g=$2*255
            b=$3*255
        }' > gmtcpttmp.cpt
else
    echo "No format named \"$FORMAT\""
    exit 1
fi
gmt makecpt -Cgmtcpttmp.cpt -T0/1/0.001 > $OFILE
rm gmtcpttmp.cpt

#####
#	PLOT COLOR PALETTE
#####
if [ -n "$PSFILE" ]
then
    PSFILE="$PSFILE.ps"
    gmt psscale -D1i/1i+w4i/0.5i -C$OFILE -Ba0.2g0.1 > $PSFILE
    ps2pdf $PSFILE
    rm $PSFILE
fi

#####
#	CLEAN UP
#####
if [ -f gmt.history ]
then
    rm gmt.history
fi

exit
exit

#_autumn_data = {'red':   ((0., 1.0, 1.0), (1.0, 1.0, 1.0)),
#                'green': ((0., 0., 0.), (1.0, 1.0, 1.0)),
#                'blue':  ((0., 0., 0.), (1.0, 0., 0.))}



_cool_data = {'red':   ((0., 0., 0.), (1.0, 1.0, 1.0)),
              'green': ((0., 1., 1.), (1.0, 0.,  0.)),
              'blue':  ((0., 1., 1.), (1.0, 1.,  1.))}

_copper_data = {'red':   ((0., 0., 0.),
                          (0.809524, 1.000000, 1.000000),
                          (1.0, 1.0, 1.0)),
                'green': ((0., 0., 0.),
                          (1.0, 0.7812, 0.7812)),
                'blue':  ((0., 0., 0.),
                          (1.0, 0.4975, 0.4975))}

_flag_data = {
        'red': lambda x: 0.75 * np.sin((x * 31.5 + 0.25) * np.pi) + 0.5,
        'green': lambda x: np.sin(x * 31.5 * np.pi),
        'blue': lambda x: 0.75 * np.sin((x * 31.5 - 0.25) * np.pi) + 0.5,
}

_prism_data = {
        'red': lambda x: 0.75 * np.sin((x * 20.9 + 0.25) * np.pi) + 0.67,
        'green': lambda x: 0.75 * np.sin((x * 20.9 - 0.25) * np.pi) + 0.33,
        'blue': lambda x: -1.1 * np.sin((x * 20.9) * np.pi),
}


def cubehelix(gamma=1.0, s=0.5, r=-1.5, h=1.0):
    """Return custom data dictionary of (r,g,b) conversion functions, which
    can be used with :func:`register_cmap`, for the cubehelix color scheme.

    Unlike most other color schemes cubehelix was designed by D.A. Green to
    be monotonically increasing in terms of perceived brightness.
    Also, when printed on a black and white postscript printer, the scheme
    results in a greyscale with monotonically increasing brightness.
    This color scheme is named cubehelix because the r,g,b values produced
    can be visualised as a squashed helix around the diagonal in the
    r,g,b color cube.

    For a unit color cube (i.e. 3-D coordinates for r,g,b each in the
    range 0 to 1) the color scheme starts at (r,g,b) = (0,0,0), i.e. black,
    and finishes at (r,g,b) = (1,1,1), i.e. white. For some fraction *x*,
    between 0 and 1, the color is the corresponding grey value at that
    fraction along the black to white diagonal (x,x,x) plus a color
    element. This color element is calculated in a plane of constant
    perceived intensity and controlled by the following parameters.

    Optional keyword arguments:

      =========   =======================================================
      Keyword     Description
      =========   =======================================================
      gamma       gamma factor to emphasise either low intensity values
                  (gamma < 1), or high intensity values (gamma > 1);
                  defaults to 1.0.
      s           the start color; defaults to 0.5 (i.e. purple).
      r           the number of r,g,b rotations in color that are made
                  from the start to the end of the color scheme; defaults
                  to -1.5 (i.e. -> B -> G -> R -> B).
      h           the hue parameter which controls how saturated the
                  colors are. If this parameter is zero then the color
                  scheme is purely a greyscale; defaults to 1.0.
      =========   =======================================================

    """

    def get_color_function(p0, p1):

        def color(x):
            # Apply gamma factor to emphasise low or high intensity values
            xg = x ** gamma

            # Calculate amplitude and angle of deviation from the black
            # to white diagonal in the plane of constant
            # perceived intensity.
            a = h * xg * (1 - xg) / 2

            phi = 2 * np.pi * (s / 3 + r * x)

            return xg + a * (p0 * np.cos(phi) + p1 * np.sin(phi))
        return color

    return {
            'red': get_color_function(-0.14861, 1.78277),
            'green': get_color_function(-0.29227, -0.90649),
            'blue': get_color_function(1.97294, 0.0),
    }

_cubehelix_data = cubehelix()

_bwr_data = ((0.0, 0.0, 1.0), (1.0, 1.0, 1.0), (1.0, 0.0, 0.0))
_brg_data = ((0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (0.0, 1.0, 0.0))

# Gnuplot palette functions
gfunc = {
        0: lambda x: 0,
        1: lambda x: 0.5,
        2: lambda x: 1,
        3: lambda x: x,
        4: lambda x: x ** 2,
        5: lambda x: x ** 3,
        6: lambda x: x ** 4,
        7: lambda x: np.sqrt(x),
        8: lambda x: np.sqrt(np.sqrt(x)),
        9: lambda x: np.sin(x * np.pi / 2),
        10: lambda x: np.cos(x * np.pi / 2),
        11: lambda x: np.abs(x - 0.5),
        12: lambda x: (2 * x - 1) ** 2,
        13: lambda x: np.sin(x * np.pi),
        14: lambda x: np.abs(np.cos(x * np.pi)),
        15: lambda x: np.sin(x * 2 * np.pi),
        16: lambda x: np.cos(x * 2 * np.pi),
        17: lambda x: np.abs(np.sin(x * 2 * np.pi)),
        18: lambda x: np.abs(np.cos(x * 2 * np.pi)),
        19: lambda x: np.abs(np.sin(x * 4 * np.pi)),
        20: lambda x: np.abs(np.cos(x * 4 * np.pi)),
        21: lambda x: 3 * x,
        22: lambda x: 3 * x - 1,
        23: lambda x: 3 * x - 2,
        24: lambda x: np.abs(3 * x - 1),
        25: lambda x: np.abs(3 * x - 2),
        26: lambda x: (3 * x - 1) / 2,
        27: lambda x: (3 * x - 2) / 2,
        28: lambda x: np.abs((3 * x - 1) / 2),
        29: lambda x: np.abs((3 * x - 2) / 2),
        30: lambda x: x / 0.32 - 0.78125,
        31: lambda x: 2 * x - 0.84,
        32: lambda x: gfunc32(x),
        33: lambda x: np.abs(2 * x - 0.5),
        34: lambda x: 2 * x,
        35: lambda x: 2 * x - 0.5,
        36: lambda x: 2 * x - 1.
}


def gfunc32(x):
    ret = np.zeros(len(x))
    m = (x < 0.25)
    ret[m] = 4 * x[m]
    m = (x >= 0.25) & (x < 0.92)
    ret[m] = -2 * x[m] + 1.84
    m = (x >= 0.92)
    ret[m] = x[m] / 0.08 - 11.5
    return ret

_gnuplot_data = {
        'red': gfunc[7],
        'green': gfunc[5],
        'blue': gfunc[15],
}

_ocean_data = {
        'red': gfunc[23],
        'green': gfunc[28],
        'blue': gfunc[3],
}

_afmhot_data = {
        'red': gfunc[34],
        'green': gfunc[35],
        'blue': gfunc[36],
}

_rainbow_data = {
        'red': gfunc[33],
        'green': gfunc[13],
        'blue': gfunc[10],
}

_seismic_data = (
        (0.0, 0.0, 0.3), (0.0, 0.0, 1.0),
        (1.0, 1.0, 1.0), (1.0, 0.0, 0.0),
        (0.5, 0.0, 0.0))

_terrain_data = (
        (0.00, (0.2, 0.2, 0.6)),
        (0.15, (0.0, 0.6, 1.0)),
        (0.25, (0.0, 0.8, 0.4)),
        (0.50, (1.0, 1.0, 0.6)),
        (0.75, (0.5, 0.36, 0.33)),
        (1.00, (1.0, 1.0, 1.0)))

_gray_data = {'red':   ((0., 0, 0), (1., 1, 1)),
              'green': ((0., 0, 0), (1., 1, 1)),
              'blue':  ((0., 0, 0), (1., 1, 1))}

_hot_data = {'red':   ((0., 0.0416, 0.0416),
                       (0.365079, 1.000000, 1.000000),
                       (1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),
                       (0.365079, 0.000000, 0.000000),
                       (0.746032, 1.000000, 1.000000),
                       (1.0, 1.0, 1.0)),
             'blue':  ((0., 0., 0.),
                       (0.746032, 0.000000, 0.000000),
                       (1.0, 1.0, 1.0))}

_hsv_data = {'red':   ((0., 1., 1.),
                       (0.158730, 1.000000, 1.000000),
                       (0.174603, 0.968750, 0.968750),
                       (0.333333, 0.031250, 0.031250),
                       (0.349206, 0.000000, 0.000000),
                       (0.666667, 0.000000, 0.000000),
                       (0.682540, 0.031250, 0.031250),
                       (0.841270, 0.968750, 0.968750),
                       (0.857143, 1.000000, 1.000000),
                       (1.0, 1.0, 1.0)),
             'green': ((0., 0., 0.),
                       (0.158730, 0.937500, 0.937500),
                       (0.174603, 1.000000, 1.000000),
                       (0.507937, 1.000000, 1.000000),
                       (0.666667, 0.062500, 0.062500),
                       (0.682540, 0.000000, 0.000000),
                       (1.0, 0., 0.)),
             'blue':  ((0., 0., 0.),
                       (0.333333, 0.000000, 0.000000),
                       (0.349206, 0.062500, 0.062500),
                       (0.507937, 1.000000, 1.000000),
                       (0.841270, 1.000000, 1.000000),
                       (0.857143, 0.937500, 0.937500),
                       (1.0, 0.09375, 0.09375))}

_jet_data = {'red':   ((0., 0, 0), (0.35, 0, 0), (0.66, 1, 1), (0.89, 1, 1),
                         (1, 0.5, 0.5)),
             'green': ((0., 0, 0), (0.125, 0, 0), (0.375, 1, 1), (0.64, 1, 1),
                         (0.91, 0, 0), (1, 0, 0)),
             'blue':  ((0., 0.5, 0.5), (0.11, 1, 1), (0.34, 1, 1),
                         (0.65, 0, 0), (1, 0, 0))}

_pink_data = {'red':   ((0., 0.1178, 0.1178), (0.015873, 0.195857, 0.195857),
                        (0.031746, 0.250661, 0.250661),
                        (0.047619, 0.295468, 0.295468),
                        (0.063492, 0.334324, 0.334324),
                        (0.079365, 0.369112, 0.369112),
                        (0.095238, 0.400892, 0.400892),
                        (0.111111, 0.430331, 0.430331),
                        (0.126984, 0.457882, 0.457882),
                        (0.142857, 0.483867, 0.483867),
                        (0.158730, 0.508525, 0.508525),
                        (0.174603, 0.532042, 0.532042),
                        (0.190476, 0.554563, 0.554563),
                        (0.206349, 0.576204, 0.576204),
                        (0.222222, 0.597061, 0.597061),
                        (0.238095, 0.617213, 0.617213),
                        (0.253968, 0.636729, 0.636729),
                        (0.269841, 0.655663, 0.655663),
                        (0.285714, 0.674066, 0.674066),
                        (0.301587, 0.691980, 0.691980),
                        (0.317460, 0.709441, 0.709441),
                        (0.333333, 0.726483, 0.726483),
                        (0.349206, 0.743134, 0.743134),
                        (0.365079, 0.759421, 0.759421),
                        (0.380952, 0.766356, 0.766356),
                        (0.396825, 0.773229, 0.773229),
                        (0.412698, 0.780042, 0.780042),
                        (0.428571, 0.786796, 0.786796),
                        (0.444444, 0.793492, 0.793492),
                        (0.460317, 0.800132, 0.800132),
                        (0.476190, 0.806718, 0.806718),
                        (0.492063, 0.813250, 0.813250),
                        (0.507937, 0.819730, 0.819730),
                        (0.523810, 0.826160, 0.826160),
                        (0.539683, 0.832539, 0.832539),
                        (0.555556, 0.838870, 0.838870),
                        (0.571429, 0.845154, 0.845154),
                        (0.587302, 0.851392, 0.851392),
                        (0.603175, 0.857584, 0.857584),
                        (0.619048, 0.863731, 0.863731),
                        (0.634921, 0.869835, 0.869835),
                        (0.650794, 0.875897, 0.875897),
                        (0.666667, 0.881917, 0.881917),
                        (0.682540, 0.887896, 0.887896),
                        (0.698413, 0.893835, 0.893835),
                        (0.714286, 0.899735, 0.899735),
                        (0.730159, 0.905597, 0.905597),
                        (0.746032, 0.911421, 0.911421),
                        (0.761905, 0.917208, 0.917208),
                        (0.777778, 0.922958, 0.922958),
                        (0.793651, 0.928673, 0.928673),
                        (0.809524, 0.934353, 0.934353),
                        (0.825397, 0.939999, 0.939999),
                        (0.841270, 0.945611, 0.945611),
                        (0.857143, 0.951190, 0.951190),
                        (0.873016, 0.956736, 0.956736),
                        (0.888889, 0.962250, 0.962250),
                        (0.904762, 0.967733, 0.967733),
                        (0.920635, 0.973185, 0.973185),
                        (0.936508, 0.978607, 0.978607),
                        (0.952381, 0.983999, 0.983999),
                        (0.968254, 0.989361, 0.989361),
                        (0.984127, 0.994695, 0.994695), (1.0, 1.0, 1.0)),
              'green': ((0., 0., 0.), (0.015873, 0.102869, 0.102869),
                        (0.031746, 0.145479, 0.145479),
                        (0.047619, 0.178174, 0.178174),
                        (0.063492, 0.205738, 0.205738),
                        (0.079365, 0.230022, 0.230022),
                        (0.095238, 0.251976, 0.251976),
                        (0.111111, 0.272166, 0.272166),
                        (0.126984, 0.290957, 0.290957),
                        (0.142857, 0.308607, 0.308607),
                        (0.158730, 0.325300, 0.325300),
                        (0.174603, 0.341178, 0.341178),
                        (0.190476, 0.356348, 0.356348),
                        (0.206349, 0.370899, 0.370899),
                        (0.222222, 0.384900, 0.384900),
                        (0.238095, 0.398410, 0.398410),
                        (0.253968, 0.411476, 0.411476),
                        (0.269841, 0.424139, 0.424139),
                        (0.285714, 0.436436, 0.436436),
                        (0.301587, 0.448395, 0.448395),
                        (0.317460, 0.460044, 0.460044),
                        (0.333333, 0.471405, 0.471405),
                        (0.349206, 0.482498, 0.482498),
                        (0.365079, 0.493342, 0.493342),
                        (0.380952, 0.517549, 0.517549),
                        (0.396825, 0.540674, 0.540674),
                        (0.412698, 0.562849, 0.562849),
                        (0.428571, 0.584183, 0.584183),
                        (0.444444, 0.604765, 0.604765),
                        (0.460317, 0.624669, 0.624669),
                        (0.476190, 0.643958, 0.643958),
                        (0.492063, 0.662687, 0.662687),
                        (0.507937, 0.680900, 0.680900),
                        (0.523810, 0.698638, 0.698638),
                        (0.539683, 0.715937, 0.715937),
                        (0.555556, 0.732828, 0.732828),
                        (0.571429, 0.749338, 0.749338),
                        (0.587302, 0.765493, 0.765493),
                        (0.603175, 0.781313, 0.781313),
                        (0.619048, 0.796819, 0.796819),
                        (0.634921, 0.812029, 0.812029),
                        (0.650794, 0.826960, 0.826960),
                        (0.666667, 0.841625, 0.841625),
                        (0.682540, 0.856040, 0.856040),
                        (0.698413, 0.870216, 0.870216),
                        (0.714286, 0.884164, 0.884164),
                        (0.730159, 0.897896, 0.897896),
                        (0.746032, 0.911421, 0.911421),
                        (0.761905, 0.917208, 0.917208),
                        (0.777778, 0.922958, 0.922958),
                        (0.793651, 0.928673, 0.928673),
                        (0.809524, 0.934353, 0.934353),
                        (0.825397, 0.939999, 0.939999),
                        (0.841270, 0.945611, 0.945611),
                        (0.857143, 0.951190, 0.951190),
                        (0.873016, 0.956736, 0.956736),
                        (0.888889, 0.962250, 0.962250),
                        (0.904762, 0.967733, 0.967733),
                        (0.920635, 0.973185, 0.973185),
                        (0.936508, 0.978607, 0.978607),
                        (0.952381, 0.983999, 0.983999),
                        (0.968254, 0.989361, 0.989361),
                        (0.984127, 0.994695, 0.994695), (1.0, 1.0, 1.0)),
              'blue':  ((0., 0., 0.), (0.015873, 0.102869, 0.102869),
                        (0.031746, 0.145479, 0.145479),
                        (0.047619, 0.178174, 0.178174),
                        (0.063492, 0.205738, 0.205738),
                        (0.079365, 0.230022, 0.230022),
                        (0.095238, 0.251976, 0.251976),
                        (0.111111, 0.272166, 0.272166),
                        (0.126984, 0.290957, 0.290957),
                        (0.142857, 0.308607, 0.308607),
                        (0.158730, 0.325300, 0.325300),
                        (0.174603, 0.341178, 0.341178),
                        (0.190476, 0.356348, 0.356348),
                        (0.206349, 0.370899, 0.370899),
                        (0.222222, 0.384900, 0.384900),
                        (0.238095, 0.398410, 0.398410),
                        (0.253968, 0.411476, 0.411476),
                        (0.269841, 0.424139, 0.424139),
                        (0.285714, 0.436436, 0.436436),
                        (0.301587, 0.448395, 0.448395),
                        (0.317460, 0.460044, 0.460044),
                        (0.333333, 0.471405, 0.471405),
                        (0.349206, 0.482498, 0.482498),
                        (0.365079, 0.493342, 0.493342),
                        (0.380952, 0.503953, 0.503953),
                        (0.396825, 0.514344, 0.514344),
                        (0.412698, 0.524531, 0.524531),
                        (0.428571, 0.534522, 0.534522),
                        (0.444444, 0.544331, 0.544331),
                        (0.460317, 0.553966, 0.553966),
                        (0.476190, 0.563436, 0.563436),
                        (0.492063, 0.572750, 0.572750),
                        (0.507937, 0.581914, 0.581914),
                        (0.523810, 0.590937, 0.590937),
                        (0.539683, 0.599824, 0.599824),
                        (0.555556, 0.608581, 0.608581),
                        (0.571429, 0.617213, 0.617213),
                        (0.587302, 0.625727, 0.625727),
                        (0.603175, 0.634126, 0.634126),
                        (0.619048, 0.642416, 0.642416),
                        (0.634921, 0.650600, 0.650600),
                        (0.650794, 0.658682, 0.658682),
                        (0.666667, 0.666667, 0.666667),
                        (0.682540, 0.674556, 0.674556),
                        (0.698413, 0.682355, 0.682355),
                        (0.714286, 0.690066, 0.690066),
                        (0.730159, 0.697691, 0.697691),
                        (0.746032, 0.705234, 0.705234),
                        (0.761905, 0.727166, 0.727166),
                        (0.777778, 0.748455, 0.748455),
                        (0.793651, 0.769156, 0.769156),
                        (0.809524, 0.789314, 0.789314),
                        (0.825397, 0.808969, 0.808969),
                        (0.841270, 0.828159, 0.828159),
                        (0.857143, 0.846913, 0.846913),
                        (0.873016, 0.865261, 0.865261),
                        (0.888889, 0.883229, 0.883229),
                        (0.904762, 0.900837, 0.900837),
                        (0.920635, 0.918109, 0.918109),
                        (0.936508, 0.935061, 0.935061),
                        (0.952381, 0.951711, 0.951711),
                        (0.968254, 0.968075, 0.968075),
                        (0.984127, 0.984167, 0.984167), (1.0, 1.0, 1.0))}

_spring_data = {'red':   ((0., 1., 1.), (1.0, 1.0, 1.0)),
                'green': ((0., 0., 0.), (1.0, 1.0, 1.0)),
                'blue':  ((0., 1., 1.), (1.0, 0.0, 0.0))}


_summer_data = {'red':   ((0., 0., 0.), (1.0, 1.0, 1.0)),
                'green': ((0., 0.5, 0.5), (1.0, 1.0, 1.0)),
                'blue':  ((0., 0.4, 0.4), (1.0, 0.4, 0.4))}


_winter_data = {'red':   ((0., 0., 0.), (1.0, 0.0, 0.0)),
                'green': ((0., 0., 0.), (1.0, 1.0, 1.0)),
                'blue':  ((0., 1., 1.), (1.0, 0.5, 0.5))}

_nipy_spectral_data = {
      'red': [(0.0, 0.0, 0.0), (0.05, 0.4667, 0.4667),
              (0.10, 0.5333, 0.5333), (0.15, 0.0, 0.0),
              (0.20, 0.0, 0.0), (0.25, 0.0, 0.0),
              (0.30, 0.0, 0.0), (0.35, 0.0, 0.0),
              (0.40, 0.0, 0.0), (0.45, 0.0, 0.0),
              (0.50, 0.0, 0.0), (0.55, 0.0, 0.0),
              (0.60, 0.0, 0.0), (0.65, 0.7333, 0.7333),
              (0.70, 0.9333, 0.9333), (0.75, 1.0, 1.0),
              (0.80, 1.0, 1.0), (0.85, 1.0, 1.0),
              (0.90, 0.8667, 0.8667), (0.95, 0.80, 0.80),
              (1.0, 0.80, 0.80)],
    'green': [(0.0, 0.0, 0.0), (0.05, 0.0, 0.0),
              (0.10, 0.0, 0.0), (0.15, 0.0, 0.0),
              (0.20, 0.0, 0.0), (0.25, 0.4667, 0.4667),
              (0.30, 0.6000, 0.6000), (0.35, 0.6667, 0.6667),
              (0.40, 0.6667, 0.6667), (0.45, 0.6000, 0.6000),
              (0.50, 0.7333, 0.7333), (0.55, 0.8667, 0.8667),
              (0.60, 1.0, 1.0), (0.65, 1.0, 1.0),
              (0.70, 0.9333, 0.9333), (0.75, 0.8000, 0.8000),
              (0.80, 0.6000, 0.6000), (0.85, 0.0, 0.0),
              (0.90, 0.0, 0.0), (0.95, 0.0, 0.0),
              (1.0, 0.80, 0.80)],
     'blue': [(0.0, 0.0, 0.0), (0.05, 0.5333, 0.5333),
              (0.10, 0.6000, 0.6000), (0.15, 0.6667, 0.6667),
              (0.20, 0.8667, 0.8667), (0.25, 0.8667, 0.8667),
              (0.30, 0.8667, 0.8667), (0.35, 0.6667, 0.6667),
              (0.40, 0.5333, 0.5333), (0.45, 0.0, 0.0),
              (0.5, 0.0, 0.0), (0.55, 0.0, 0.0),
              (0.60, 0.0, 0.0), (0.65, 0.0, 0.0),
              (0.70, 0.0, 0.0), (0.75, 0.0, 0.0),
              (0.80, 0.0, 0.0), (0.85, 0.0, 0.0),
              (0.90, 0.0, 0.0), (0.95, 0.0, 0.0),
              (1.0, 0.80, 0.80)],
}












datad = _deprecation_datad({
    'afmhot': _afmhot_data,
    'autumn': _autumn_data,
    'bone':   _bone_data,
    'binary': _binary_data,
    'bwr':    _bwr_data,
    'brg':    _brg_data,
    'CMRmap': _CMRmap_data,
    'cool':   _cool_data,
    'copper': _copper_data,
    'cubehelix': _cubehelix_data,
    'flag':   _flag_data,
    'gnuplot': _gnuplot_data,
    'gnuplot2': _gnuplot2_data,
    'gray':  _gray_data,
    'hot':    _hot_data,
    'hsv':    _hsv_data,
    'jet':   _jet_data,
    'ocean':  _ocean_data,
    'pink':   _pink_data,
    'prism':  _prism_data,
    'rainbow': _rainbow_data,
    'seismic': _seismic_data,
    'spring': _spring_data,
    'summer': _summer_data,
    'terrain': _terrain_data,
    'winter': _winter_data,
    'nipy_spectral': _nipy_spectral_data,
    'spectral': _nipy_spectral_data,  # alias for backward compatibility
    })



datad['gist_earth'] = _gist_earth_data
datad['gist_gray'] = _gist_gray_data
datad['gist_heat'] = _gist_heat_data
datad['gist_ncar'] = _gist_ncar_data
datad['gist_rainbow'] = _gist_rainbow_data
datad['gist_stern'] = _gist_stern_data
datad['gist_yarg'] = _gist_yarg_data

datad['coolwarm'] = _coolwarm_data

# Qualitative
datad['Accent'] = {'listed': _Accent_data}
datad['Dark2'] = {'listed': _Dark2_data}
datad['Paired'] = {'listed': _Paired_data}
datad['Pastel1'] = {'listed': _Pastel1_data}
datad['Pastel2'] = {'listed': _Pastel2_data}
datad['Set1'] = {'listed': _Set1_data}
datad['Set2'] = {'listed': _Set2_data}
datad['Set3'] = {'listed': _Set3_data}

datad['tab10'] = {'listed': _tab10_data}
datad['tab20'] = {'listed': _tab20_data}
datad['tab20b'] = {'listed': _tab20b_data}
datad['tab20c'] = {'listed': _tab20c_data}

datad['Vega10'] = {'listed': _tab10_data}
datad['Vega20'] = {'listed': _tab20_data}
datad['Vega20b'] = {'listed': _tab20b_data}
datad['Vega20c'] = {'listed': _tab20c_data}
